apply plugin: 'base'
apply plugin: 'application'

mainClassName = 'org.opt4j.start.Opt4J'

allprojects {
    group = 'org.opt4j'
    version = '3.0'
	dateISO = new Date().format("yyyy-MM-dd") 
    sourceCompatibility = 1.6
    
    repositories {
    	mavenCentral()
    }
}

subprojects {
	apply plugin: 'java'
    apply plugin: 'maven'
    apply plugin: 'signing'
	
	task sourcesJar(type: Jar, dependsOn:classes) {
		from sourceSets.main.allSource 
		classifier = 'sources' 
	} 

	task javadocJar(type: Jar, dependsOn:javadoc) {
		from javadoc.destinationDir 
		classifier = 'javadoc' 
	}

	artifacts { 
		archives jar
		archives sourcesJar 
		archives javadocJar 
	}

	signing {
	    sign configurations.archives
	}
	
	uploadArchives {
	    repositories {
	        mavenDeployer {
	            beforeDeployment { MavenDeployment deployment -> signing.signPom(deployment) }
	 
	            repository(url: "https://oss.sonatype.org/service/local/staging/deploy/maven2/") {
	              authentication(userName: sonatypeUsername, password: sonatypePassword)
	            }
	 
	            pom.project {
	               name 'Opt4J'
	               packaging 'jar'
	               description 'Opt4J is a modular framework for meta-heuristic optimization.'
	               url 'http://www.opt4j.org'
	 
	               scm {
	                   url 'http://hg.code.sf.net/p/opt4j/hgroot'
	                   connection 'http://hg.code.sf.net/p/opt4j/hgroot'
	               }
	 
	               licenses {
	                   license {
	                       name 'GNU Lesser General Public License'
	                       url 'http://www.gnu.org/licenses/lgpl.txt'
	                       distribution 'repo'
	                   }
	               }
	 
	               developers {
	                   developer {
	                       id 'lukasiewycz'
	                       name 'Martin Lukasiewycz'
	                   }
	                   developer {
	                       id 'reimann'
	                       name 'Felix Reimann'
	                   }
	                   developer {
	                       id 'glass'
	                       name 'Michael Glass'
	                   }
	               }
	           }
	        }
	    }
	}
}

compileJava  {
   	def currentJvm = org.gradle.internal.jvm.Jvm.current()
	println "current JVM: "+currentJvm
}

dependencies {
	runtime project(':opt4j-core')
	runtime project(':opt4j-satdecoding')
	runtime project(':opt4j-operators')
	runtime project(':opt4j-optimizers')
	runtime project(':opt4j-benchmarks')
	runtime project(':opt4j-viewer')
	runtime project(':opt4j-tutorial')
}

jar {
	manifest { 
		attributes 'Main-Class': mainClassName
	}
}